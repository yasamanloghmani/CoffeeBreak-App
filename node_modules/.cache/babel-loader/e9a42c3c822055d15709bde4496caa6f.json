{"ast":null,"code":"import tokenService from './tokenService';\nconst BASE_URL = '/api/users/';\n\nfunction signup(user) {\n  return fetch(BASE_URL + 'signup', {\n    method: 'POST',\n    headers: new Headers({\n      'Content-Type': 'application/json'\n    }),\n    body: JSON.stringify(user)\n  }).then(res => {\n    if (res.ok) return res.json();\n    throw new Error('Email already taken!');\n  }).then(({\n    token\n  }) => {\n    tokenService.setToken(token);\n  });\n}\n\nfunction getUser() {\n  return tokenService.getUserFromToken();\n}\n\nfunction logout() {\n  tokenService.removeToken();\n}\n\nfunction login(creds) {\n  return fetch(BASE_URL + 'login', {\n    method: 'POST',\n    headers: new Headers({\n      'Content-Type': 'application/json'\n    }),\n    body: JSON.stringify(creds)\n  }).then(res => {\n    // Valid login if we have a status of 2xx (res.ok)\n    if (res.ok) return res.json();\n    throw new Error('Bad Credentials!');\n  }).then(({\n    token\n  }) => tokenService.setToken(token));\n}\n\nfunction getAllGroups(userId) {\n  return fetch(BASE_URL + userId + '/groups').then(res => res.json());\n}\n\nfunction updateUser(user) {\n  return fetch(BASE_URL + \"update\", {\n    method: \"PUT\",\n    headers: new Headers({\n      \"Content-Type\": \"application/json\"\n    }),\n    body: JSON.stringify(user)\n  }).then(res => {\n    if (res.ok) return res.json();\n    throw new Error(\"Couldn't update.\");\n  }).then(({\n    token\n  }) => tokenService.setToken(token));\n}\n\nfunction deleteUser(user) {\n  return fetch(BASE_URL + \"delete\", {\n    method: \"DELETE\",\n    headers: new Headers({\n      \"Content-Type\": \"application/json\"\n    }),\n    body: JSON.stringify(user)\n  }).then(res => {\n    if (res.ok) return res.json();\n    throw new Error(\"Couldn't delete.\");\n  }).then(({\n    token\n  }) => tokenService.setToken(token));\n}\n\nexport default {\n  signup,\n  getUser,\n  logout,\n  login,\n  getAllGroups,\n  updateUser,\n  deleteUser\n};","map":{"version":3,"sources":["/Users/yasamanloghmani/Desktop/CoffeeBreak-App/CoffeeBreak-App/coffeebreak/src/utils/userService.js"],"names":["tokenService","BASE_URL","signup","user","fetch","method","headers","Headers","body","JSON","stringify","then","res","ok","json","Error","token","setToken","getUser","getUserFromToken","logout","removeToken","login","creds","getAllGroups","userId","updateUser","deleteUser"],"mappings":"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","sourcesContent":["import tokenService from './tokenService';\n\nconst BASE_URL = '/api/users/';\n\n\nfunction signup(user) {\n  return fetch(BASE_URL + 'signup', {\n    method: 'POST',\n    headers: new Headers({'Content-Type': 'application/json'}),\n    body: JSON.stringify(user)\n  })\n  .then(res => {\n    if (res.ok) return res.json();\n    throw new Error('Email already taken!');\n  })\n  .then(({ token }) => {\n    tokenService.setToken(token);\n  });\n}\n\nfunction getUser() {\n  return tokenService.getUserFromToken();\n}\n\nfunction logout() {\n  tokenService.removeToken();\n}\n\nfunction login(creds) {\n  return fetch(BASE_URL + 'login', {\n    method: 'POST',\n    headers: new Headers({'Content-Type': 'application/json'}),\n    body: JSON.stringify(creds)\n  })\n  .then(res => {\n    // Valid login if we have a status of 2xx (res.ok)\n    if (res.ok) return res.json();\n    throw new Error('Bad Credentials!');\n  })\n  .then(({token}) => tokenService.setToken(token));\n}\n\n\nfunction getAllGroups(userId) {\n  return fetch(BASE_URL+ userId + '/groups')\n  .then(res => res.json())\n}\n\nfunction updateUser(user) {\n  return fetch(BASE_URL + \"update\", {\n      method: \"PUT\",\n      headers: new Headers({ \"Content-Type\": \"application/json\" }),\n      body: JSON.stringify(user)\n  })\n      .then(res => {\n          if (res.ok) return res.json();\n          throw new Error(\"Couldn't update.\");\n      })\n      .then(({ token }) => tokenService.setToken(token));\n}\n\nfunction deleteUser(user) {\n  return fetch(BASE_URL + \"delete\", {\n      method: \"DELETE\",\n      headers: new Headers({ \"Content-Type\": \"application/json\" }),\n      body: JSON.stringify(user)\n  })\n      .then(res => {\n          if (res.ok) return res.json();\n          throw new Error(\"Couldn't delete.\");\n      })\n      .then(({ token }) => tokenService.setToken(token));\n}\n\nexport default {\n  signup,\n  getUser,\n  logout,\n  login,\n  getAllGroups,\n  updateUser,\n  deleteUser\n}"]},"metadata":{},"sourceType":"module"}