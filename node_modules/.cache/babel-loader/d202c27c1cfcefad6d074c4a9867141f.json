{"ast":null,"code":"import tokenService from'./tokenService';var BASE_URL='/api/users/';function signup(user){return fetch(BASE_URL+'signup',{method:'POST',headers:new Headers({'Content-Type':'application/json'}),body:JSON.stringify(user)}).then(function(res){if(res.ok)return res.json();throw new Error('Email already taken!');}).then(function(_ref){var token=_ref.token;tokenService.setToken(token);});}function getUser(){return tokenService.getUserFromToken();}function logout(){tokenService.removeToken();}function login(creds){return fetch(BASE_URL+'login',{method:'POST',headers:new Headers({'Content-Type':'application/json'}),body:JSON.stringify(creds)}).then(function(res){if(res.ok)return res.json();throw new Error('Bad Credentials!');}).then(function(_ref2){var token=_ref2.token;return tokenService.setToken(token);});}function getAllGroups(userId){return fetch(BASE_URL+userId+'/groups').then(function(res){return res.json();});}function updateUser(user){return fetch(BASE_URL+\"update\",{method:\"PUT\",headers:new Headers({\"Content-Type\":\"application/json\"}),body:JSON.stringify(user)}).then(function(res){if(res.ok)return res.json();throw new Error(\"Couldn't update.\");}).then(function(_ref3){var token=_ref3.token;return tokenService.setToken(token);});}function deleteUser(user){return fetch(BASE_URL+\"delete\",{method:\"DELETE\",headers:new Headers({\"Content-Type\":\"application/json\"}),body:JSON.stringify(user)}).then(function(res){if(res.ok)return res.json();throw new Error(\"Couldn't delete.\");}).then(function(_ref4){var token=_ref4.token;return tokenService.setToken(token);});}export default{signup:signup,getUser:getUser,logout:logout,login:login,getAllGroups:getAllGroups,updateUser:updateUser,deleteUser:deleteUser};","map":{"version":3,"sources":["/Users/yasamanloghmani/Desktop/CoffeeBreak-App/CoffeeBreak-App/coffeebreak/src/utils/userService.js"],"names":["tokenService","BASE_URL","signup","user","fetch","method","headers","Headers","body","JSON","stringify","then","res","ok","json","Error","token","setToken","getUser","getUserFromToken","logout","removeToken","login","creds","getAllGroups","userId","updateUser","deleteUser"],"mappings":"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","sourcesContent":["import tokenService from './tokenService';\n\nconst BASE_URL = '/api/users/';\n\n\nfunction signup(user) {\n  return fetch(BASE_URL + 'signup', {\n    method: 'POST',\n    headers: new Headers({'Content-Type': 'application/json'}),\n    body: JSON.stringify(user)\n  })\n  .then(res => {\n    if (res.ok) return res.json();\n    throw new Error('Email already taken!');\n  })\n  .then(({ token }) => {\n    tokenService.setToken(token);\n  });\n}\n\nfunction getUser() {\n  return tokenService.getUserFromToken();\n}\n\nfunction logout() {\n  tokenService.removeToken();\n}\n\nfunction login(creds) {\n  return fetch(BASE_URL + 'login', {\n    method: 'POST',\n    headers: new Headers({'Content-Type': 'application/json'}),\n    body: JSON.stringify(creds)\n  })\n  .then(res => {\n    if (res.ok) return res.json();\n    throw new Error('Bad Credentials!');\n  })\n  .then(({token}) => tokenService.setToken(token));\n}\n\n\nfunction getAllGroups(userId) {\n  return fetch(BASE_URL+ userId + '/groups')\n  .then(res => res.json())\n}\n\nfunction updateUser(user) {\n  return fetch(BASE_URL + \"update\", {\n      method: \"PUT\",\n      headers: new Headers({ \"Content-Type\": \"application/json\" }),\n      body: JSON.stringify(user)\n  })\n      .then(res => {\n          if (res.ok) return res.json();\n          throw new Error(\"Couldn't update.\");\n      })\n      .then(({ token }) => tokenService.setToken(token));\n}\n\nfunction deleteUser(user) {\n  return fetch(BASE_URL + \"delete\", {\n      method: \"DELETE\",\n      headers: new Headers({ \"Content-Type\": \"application/json\" }),\n      body: JSON.stringify(user)\n  })\n      .then(res => {\n          if (res.ok) return res.json();\n          throw new Error(\"Couldn't delete.\");\n      })\n      .then(({ token }) => tokenService.setToken(token));\n}\n\nexport default {\n  signup,\n  getUser,\n  logout,\n  login,\n  getAllGroups,\n  updateUser,\n  deleteUser\n}"]},"metadata":{},"sourceType":"module"}