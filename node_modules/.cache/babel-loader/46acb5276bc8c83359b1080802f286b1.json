{"ast":null,"code":"function setToken(token){if(token){localStorage.setItem('token',token);}else{localStorage.removeItem('token');}}function getToken(){var token=localStorage.getItem('token');if(token){// Check if expired, remove if it is\nvar payload=JSON.parse(atob(token.split('.')[1]));// JWT's exp is expressed in seconds, not milliseconds, so convert\nif(payload.exp<Date.now()/1000){localStorage.removeItem('token');token=null;}}return token;}function getUserFromToken(){var token=getToken();return token?JSON.parse(atob(token.split('.')[1])):null;}function removeToken(){localStorage.removeItem('token');}export default{setToken:setToken,getToken:getToken,removeToken:removeToken,getUserFromToken:getUserFromToken};","map":{"version":3,"sources":["/Users/yasamanloghmani/Desktop/CoffeeBreak-App/CoffeeBreak-App/coffeebreak/src/utils/tokenService.js"],"names":["setToken","token","localStorage","setItem","removeItem","getToken","getItem","payload","JSON","parse","atob","split","exp","Date","now","getUserFromToken","removeToken"],"mappings":"AAAA,QAASA,CAAAA,QAAT,CAAkBC,KAAlB,CAAyB,CACrB,GAAIA,KAAJ,CAAW,CACPC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAA8BF,KAA9B,EACH,CAFD,IAEO,CACHC,YAAY,CAACE,UAAb,CAAwB,OAAxB,EACH,CACJ,CAID,QAASC,CAAAA,QAAT,EAAoB,CAChB,GAAIJ,CAAAA,KAAK,CAAGC,YAAY,CAACI,OAAb,CAAqB,OAArB,CAAZ,CACA,GAAIL,KAAJ,CAAW,CACP;AACA,GAAMM,CAAAA,OAAO,CAAGC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACT,KAAK,CAACU,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAD,CAAf,CAAhB,CACA;AACA,GAAIJ,OAAO,CAACK,GAAR,CAAcC,IAAI,CAACC,GAAL,GAAa,IAA/B,CAAqC,CACjCZ,YAAY,CAACE,UAAb,CAAwB,OAAxB,EACAH,KAAK,CAAG,IAAR,CACH,CACJ,CACD,MAAOA,CAAAA,KAAP,CACH,CAED,QAASc,CAAAA,gBAAT,EAA6B,CACzB,GAAMd,CAAAA,KAAK,CAAGI,QAAQ,EAAtB,CACA,MAAOJ,CAAAA,KAAK,CAAGO,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACT,KAAK,CAACU,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAD,CAAf,CAAH,CAA2C,IAAvD,CACH,CAED,QAASK,CAAAA,WAAT,EAAuB,CACnBd,YAAY,CAACE,UAAb,CAAwB,OAAxB,EACD,CAED,cAAe,CACbJ,QAAQ,CAARA,QADa,CAEbK,QAAQ,CAARA,QAFa,CAGbW,WAAW,CAAXA,WAHa,CAIbD,gBAAgB,CAAhBA,gBAJa,CAAf","sourcesContent":["function setToken(token) {\n    if (token) {\n        localStorage.setItem('token', token);\n    } else {\n        localStorage.removeItem('token');\n    }\n}\n\n\n\nfunction getToken() {\n    let token = localStorage.getItem('token');\n    if (token) {\n        // Check if expired, remove if it is\n        const payload = JSON.parse(atob(token.split('.')[1]));\n        // JWT's exp is expressed in seconds, not milliseconds, so convert\n        if (payload.exp < Date.now() / 1000) {\n            localStorage.removeItem('token');\n            token = null;\n        }\n    }\n    return token;\n}\n\nfunction getUserFromToken () {\n    const token = getToken();\n    return token ? JSON.parse(atob(token.split('.')[1])) : null;\n}\n  \nfunction removeToken() {\n    localStorage.removeItem('token');\n  }\n  \n  export default {\n    setToken,\n    getToken,\n    removeToken,\n    getUserFromToken\n  };\n  "]},"metadata":{},"sourceType":"module"}